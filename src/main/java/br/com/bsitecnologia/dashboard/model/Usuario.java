package br.com.bsitecnologia.dashboard.model;

// Generated 24/09/2012 20:18:49 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import br.com.bsitecnologia.dashboard.util.BaseEntity;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name = "Usuario", catalog = "dashboard", uniqueConstraints = @UniqueConstraint(columnNames = "login"))
public class Usuario implements Serializable, BaseEntity {

	private static final long serialVersionUID = 81526129019669014L;

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;
	
	@Column(name = "login", unique = true, nullable = false, length = 100)
	private String login;
	
	@Column(name = "senha", nullable = false, length = 86)
	private String senha;
	
	@Column(name = "isColaborador", nullable = false, columnDefinition = "BIT", length = 1)
	private boolean usuarioTipoColaborador;
	
	@Transient
	private Colaborador colaborador;
	
	@Transient
	private AtorExterno atorExterno;
	
	@Transient
	private boolean logado;
	
	@OneToMany(fetch=FetchType.LAZY, mappedBy="usuario",cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
	private List<AtorExterno> atoresExternos = new ArrayList<AtorExterno>();
	
	@OneToMany(fetch=FetchType.LAZY, mappedBy="usuario",cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
	private List<Colaborador> colaboradores = new ArrayList<Colaborador>();

	@OneToMany(fetch=FetchType.LAZY, mappedBy="usuario")
	private List<AutorizacaoAtorExterno> autorizacaoAtorExternos = new ArrayList<AutorizacaoAtorExterno>();
	
	@OneToMany(fetch=FetchType.LAZY, mappedBy="usuario")
    private List<AutorizacaoColaborador> autorizacaoColaboradores = new ArrayList<AutorizacaoColaborador>();

	public Usuario() {
	}

	public Colaborador getColaborador() {
		if(colaborador == null && usuarioTipoColaborador && colaboradores.size() > 0){
			this.colaborador = colaboradores.get(0);
		}
		return colaborador;
	}

	public void setColaborador(Colaborador colaborador) {
		this.colaborador = colaborador;
		this.colaboradores.clear();
		if(colaborador != null){
			this.colaboradores.add(colaborador);
			setAtorExterno(null);
		}
	}

	public AtorExterno getAtorExterno() {
		if(atorExterno == null && !usuarioTipoColaborador && atoresExternos.size() > 0){
			this.atorExterno = atoresExternos.get(0);
		}
		return atorExterno;
	}

	public void setAtorExterno(AtorExterno atorExterno) {
		this.atorExterno = atorExterno;
		this.atoresExternos.clear();
		if(atorExterno != null){
			this.atoresExternos.add(atorExterno);
			setColaborador(null);
		}
	}

	public List<AtorExterno> getAtoresExternos() {
		return atoresExternos;
	}

	public void setAtoresExternos(List<AtorExterno> atoresExternos) {
		this.atoresExternos = atoresExternos;
	}

	public List<Colaborador> getColaboradores() {
		return colaboradores;
	}

	public void setColaboradores(List<Colaborador> colaboradores) {
		this.colaboradores = colaboradores;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getLogin() {
		return this.login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	public String getSenha() {
		return this.senha;
	}

	public void setSenha(String senha) {
		this.senha = senha;
	}

	public List<AutorizacaoAtorExterno> getAutorizacaoAtorExternos() {
		return this.autorizacaoAtorExternos;
	}

	public void setAutorizacaoAtorExternos(List<AutorizacaoAtorExterno> autorizacaoAtorExternos) {
		this.autorizacaoAtorExternos = autorizacaoAtorExternos;
	}

	public List<AutorizacaoColaborador> getAutorizacaoColaboradores() {
		return this.autorizacaoColaboradores;
	}

	public void setAutorizacaoColaboradores(List<AutorizacaoColaborador> autorizacaoColaboradors) {
		this.autorizacaoColaboradores = autorizacaoColaboradors;
	}
	
	public boolean isUsuarioTipoColaborador() {
		return usuarioTipoColaborador;
	}

	public void setUsuarioTipoColaborador(boolean usuarioTipoColaborador) {
		this.usuarioTipoColaborador = usuarioTipoColaborador;
	}
	
	public boolean isLogado() {
		return logado;
	}

	public void setLogado(boolean logado) {
		this.logado = logado;
	}
	
	public String getNomeUsuario(){
		if(usuarioTipoColaborador){
			return getColaborador() != null ? getColaborador().getNome() : null;
		}else{
			return getAtorExterno() != null ? getAtorExterno().getNome() : null;
		}
	}
	
	@Override
	public String getEntityDescription() {
		return login;
	}

}
